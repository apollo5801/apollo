#!/bin/sh
cd  ../../../system/core
patch -p1 << EOF1
diff --git a/include/cutils/atomic-arm.h b/include/cutils/atomic-arm.h
index 16fe512..4d4825d 100644
--- a/include/cutils/atomic-arm.h
+++ b/include/cutils/atomic-arm.h
@@ -136,6 +136,14 @@ extern inline int android_atomic_acquire_cas(int32_t old_value,
     return status;
 }
 
+extern inline int android_atomic_cmpxchg(int32_t old_value,
+                                         int32_t new_value,
+                                         volatile int32_t *ptr)
+{
+    android_memory_barrier();
+    return android_atomic_cas(old_value, new_value, ptr);
+}
+
 extern inline int android_atomic_release_cas(int32_t old_value,
                                              int32_t new_value,
                                              volatile int32_t *ptr)
diff --git a/include/cutils/atomic.h b/include/cutils/atomic.h
index ae42eb8..c221132 100644
--- a/include/cutils/atomic.h
+++ b/include/cutils/atomic.h
@@ -106,13 +106,19 @@ int android_atomic_acquire_cas(int32_t oldvalue, int32_t newvalue,
 int android_atomic_release_cas(int32_t oldvalue, int32_t newvalue,
         volatile int32_t* addr);
 
+#if defined(__ARM_ARCH__) || defined (__ARM_EABI__)
+int android_atomic_cmpxchg(int32_t oldvalue, int32_t newvalue,
+        volatile int32_t* addr);
+#else
+#define android_atomic_cmpxchg android_atomic_release_cas
+#endif
+
 /*
  * Aliases for code using an older version of this header.  These are now
  * deprecated and should not be used.  The definitions will be removed
  * in a future release.
  */
 #define android_atomic_write android_atomic_release_store
-#define android_atomic_cmpxchg android_atomic_release_cas
 
 #ifdef __cplusplus
 } // extern "C"
diff --git a/libcutils/atomic-android-sh.c b/libcutils/atomic-android-sh.c
index 8bac68a..9efa2bf 100644
--- a/libcutils/atomic-android-sh.c
+++ b/libcutils/atomic-android-sh.c
@@ -115,7 +115,7 @@ int32_t android_atomic_or(int32_t value, volatile int32_t* addr) {
 
 int android_atomic_acquire_cmpxchg(int32_t oldvalue, int32_t newvalue,
                            volatile int32_t* addr) {
-    return android_atomic_release_cmpxchg(oldValue, newValue, addr);
+    return android_atomic_release_cmpxchg(oldvalue, newvalue, addr);
 }
 
 int android_atomic_release_cmpxchg(int32_t oldvalue, int32_t newvalue,
EOF1
cd  ../../external/webkit
patch -p1 << EOF2
diff --git a/Android.mk b/Android.mk
index 623a35f..98b952a 100644
--- a/Android.mk
+++ b/Android.mk
@@ -69,7 +69,7 @@ endif
 
 # V8 also requires an ARMv7 CPU, and since we must use jsc, we cannot
 # use the Chrome http stack either.
-ifneq (\$(strip \$(ARCH_ARM_HAVE_ARMV7A)),true)
+ifneq (\$(strip \$(ARCH_ARM_HAVE_VFP)),true)
   JAVASCRIPT_ENGINE := jsc
   USE_ALT_HTTP := true
 endif
EOF2
cd  ../../external/v8
patch -p1 << EOF3
diff --git a/Android.mk b/Android.mk
index 34ce1c2..b275e7a 100644
--- a/Android.mk
+++ b/Android.mk
@@ -29,10 +29,12 @@ include \$(CLEAR_VARS)
 
 # Build libv8 and v8shell
 ifeq (\$(TARGET_ARCH),arm)
+    ifeq (\$(ARCH_ARM_HAVE_ARMV7A),true)
     ifneq (\$(ARCH_ARM_HAVE_ARMV7A_BUG),true)
     ENABLE_V8_SNAPSHOT = true
     include \$(BASE_PATH)/Android.mksnapshot.mk
     endif
+    endif
     include \$(BASE_PATH)/Android.libv8.mk
     include \$(BASE_PATH)/Android.v8shell.mk
 endif
EOF3
cd  ../../frameworks/base
patch -p1 << EOF4
diff --git a/api/current.txt b/api/current.txt
index a885ce4..4ad22d0 100644
--- a/api/current.txt
+++ b/api/current.txt
@@ -10251,6 +10251,7 @@ package android.location {
     method public void requestSingleUpdate(java.lang.String, android.app.PendingIntent);
     method public void requestSingleUpdate(android.location.Criteria, android.app.PendingIntent);
     method public boolean sendExtraCommand(java.lang.String, java.lang.String, android.os.Bundle);
+    method public void setGPSSource(java.lang.String);
     method public void setTestProviderEnabled(java.lang.String, boolean);
     method public void setTestProviderLocation(java.lang.String, android.location.Location);
     method public void setTestProviderStatus(java.lang.String, int, android.os.Bundle, long);
diff --git a/include/binder/IMemory.h b/include/binder/IMemory.h
index 2d0db00..74d2cc7 100644
--- a/include/binder/IMemory.h
+++ b/include/binder/IMemory.h
@@ -43,7 +43,6 @@ public:
     virtual void*       getBase() const = 0;
     virtual size_t      getSize() const = 0;
     virtual uint32_t    getFlags() const = 0;
-    virtual uint32_t    getOffset() const = 0;
 
     // these are there just for backward source compatibility
     int32_t heapID() const { return getHeapID(); }
diff --git a/include/binder/MemoryHeapBase.h b/include/binder/MemoryHeapBase.h
index bbbda9c..470a340 100644
--- a/include/binder/MemoryHeapBase.h
+++ b/include/binder/MemoryHeapBase.h
@@ -61,7 +61,6 @@ public:
     virtual void*       getBase() const;
     virtual size_t      getSize() const;
     virtual uint32_t    getFlags() const;
-    virtual uint32_t      getOffset() const;
 
     const char*         getDevice() const;
 
@@ -91,7 +90,6 @@ private:
     uint32_t    mFlags;
     const char* mDevice;
     bool        mNeedUnmap;
-    uint32_t    mOffset;
 };
 
 // ---------------------------------------------------------------------------
diff --git a/libs/binder/IMemory.cpp b/libs/binder/IMemory.cpp
index 1ace8f8..fb48732 100644
--- a/libs/binder/IMemory.cpp
+++ b/libs/binder/IMemory.cpp
@@ -81,7 +81,6 @@ public:
     virtual void* getBase() const;
     virtual size_t getSize() const;
     virtual uint32_t getFlags() const;
-    virtual uint32_t getOffset() const;
 
 private:
     friend class IMemory;
@@ -108,7 +107,6 @@ private:
     mutable void*       mBase;
     mutable size_t      mSize;
     mutable uint32_t    mFlags;
-    mutable uint32_t    mOffset;
     mutable bool        mRealHeap;
     mutable Mutex       mLock;
 };
@@ -231,7 +229,7 @@ status_t BnMemory::onTransact(
 
 BpMemoryHeap::BpMemoryHeap(const sp<IBinder>& impl)
     : BpInterface<IMemoryHeap>(impl),
-        mHeapId(-1), mBase(MAP_FAILED), mSize(0), mFlags(0), mOffset(0), mRealHeap(false)
+        mHeapId(-1), mBase(MAP_FAILED), mSize(0), mFlags(0), mRealHeap(false)
 {
 }
 
@@ -272,7 +270,6 @@ void BpMemoryHeap::assertMapped() const
             if (mHeapId == -1) {
                 mBase   = heap->mBase;
                 mSize   = heap->mSize;
-                mOffset = heap->mOffset;
                 android_atomic_write( dup( heap->mHeapId ), &mHeapId );
             }
         } else {
@@ -296,7 +293,6 @@ void BpMemoryHeap::assertReallyMapped() const
         int parcel_fd = reply.readFileDescriptor();
         ssize_t size = reply.readInt32();
         uint32_t flags = reply.readInt32();
-        uint32_t offset = reply.readInt32();
 
         LOGE_IF(err, "binder=%p transaction failed fd=%d, size=%ld, err=%d (%s)",
                 asBinder().get(), parcel_fd, size, err, strerror(-err));
@@ -313,7 +309,7 @@ void BpMemoryHeap::assertReallyMapped() const
         Mutex::Autolock _l(mLock);
         if (mHeapId == -1) {
             mRealHeap = true;
-            mBase = mmap(0, size, access, MAP_SHARED, fd, offset);
+            mBase = mmap(0, size, access, MAP_SHARED, fd, 0);
             if (mBase == MAP_FAILED) {
                 LOGE("cannot map BpMemoryHeap (binder=%p), size=%ld, fd=%d (%s)",
                         asBinder().get(), size, fd, strerror(errno));
@@ -321,7 +317,6 @@ void BpMemoryHeap::assertReallyMapped() const
             } else {
                 mSize = size;
                 mFlags = flags;
-                mOffset = offset;
                 android_atomic_write(fd, &mHeapId);
             }
         }
@@ -348,11 +343,6 @@ uint32_t BpMemoryHeap::getFlags() const {
     return mFlags;
 }
 
-uint32_t BpMemoryHeap::getOffset() const {
-    assertMapped();
-    return mOffset;
-}
-
 // ---------------------------------------------------------------------------
 
 IMPLEMENT_META_INTERFACE(MemoryHeap, "android.utils.IMemoryHeap");
@@ -372,7 +362,6 @@ status_t BnMemoryHeap::onTransact(
             reply->writeFileDescriptor(getHeapID());
             reply->writeInt32(getSize());
             reply->writeInt32(getFlags());
-            reply->writeInt32(getOffset());
             return NO_ERROR;
         } break;
         default:
diff --git a/libs/binder/MemoryHeapBase.cpp b/libs/binder/MemoryHeapBase.cpp
index bf4a73f..6ea6ec0 100644
--- a/libs/binder/MemoryHeapBase.cpp
+++ b/libs/binder/MemoryHeapBase.cpp
@@ -42,13 +42,13 @@ namespace android {
 
 MemoryHeapBase::MemoryHeapBase()
     : mFD(-1), mSize(0), mBase(MAP_FAILED),
-      mDevice(NULL), mNeedUnmap(false), mOffset(0)
+      mDevice(NULL), mNeedUnmap(false)
 {
 }
 
 MemoryHeapBase::MemoryHeapBase(size_t size, uint32_t flags, char const * name)
     : mFD(-1), mSize(0), mBase(MAP_FAILED), mFlags(flags),
-      mDevice(0), mNeedUnmap(false), mOffset(0)
+      mDevice(0), mNeedUnmap(false)
 {
     const size_t pagesize = getpagesize();
     size = ((size + pagesize-1) & ~(pagesize-1));
@@ -65,7 +65,7 @@ MemoryHeapBase::MemoryHeapBase(size_t size, uint32_t flags, char const * name)
 
 MemoryHeapBase::MemoryHeapBase(const char* device, size_t size, uint32_t flags)
     : mFD(-1), mSize(0), mBase(MAP_FAILED), mFlags(flags),
-      mDevice(0), mNeedUnmap(false), mOffset(0)
+      mDevice(0), mNeedUnmap(false)
 {
     int open_flags = O_RDWR;
     if (flags & NO_CACHING)
@@ -84,7 +84,7 @@ MemoryHeapBase::MemoryHeapBase(const char* device, size_t size, uint32_t flags)
 
 MemoryHeapBase::MemoryHeapBase(int fd, size_t size, uint32_t flags, uint32_t offset)
     : mFD(-1), mSize(0), mBase(MAP_FAILED), mFlags(flags),
-      mDevice(0), mNeedUnmap(false), mOffset(0)
+      mDevice(0), mNeedUnmap(false)
 {
     const size_t pagesize = getpagesize();
     size = ((size + pagesize-1) & ~(pagesize-1));
@@ -141,7 +141,6 @@ status_t MemoryHeapBase::mapfd(int fd, size_t size, uint32_t offset)
     }
     mFD = fd;
     mSize = size;
-    mOffset = offset;
     return NO_ERROR;
 }
 
@@ -184,9 +183,5 @@ const char* MemoryHeapBase::getDevice() const {
     return mDevice;
 }
 
-uint32_t MemoryHeapBase::getOffset() const {
-    return mOffset;
-}
-
 // ---------------------------------------------------------------------------
 }; // namespace android
diff --git a/include/ui/Overlay.h b/include/ui/Overlay.h
new file mode 100644
index 0000000..6647e92
--- /dev/null
+++ b/include/ui/Overlay.h
@@ -0,0 +1,103 @@
+/*
+ * Copyright (C) 2007 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef ANDROID_OVERLAY_H
+#define ANDROID_OVERLAY_H
+
+#include <stdint.h>
+#include <sys/types.h>
+
+#include <utils/Errors.h>
+#include <binder/IInterface.h>
+#include <utils/RefBase.h>
+#include <utils/threads.h>
+
+#include <ui/PixelFormat.h>
+
+typedef void (*overlay_set_fd_hook)(void *data,
+        int fd);
+typedef void (*overlay_set_crop_hook)(void *data,
+        uint32_t x, uint32_t y, uint32_t w, uint32_t h);
+typedef void (*overlay_queue_buffer_hook)(void *data,
+        void* buffer);
+
+namespace android {
+
+class IMemory;
+class IMemoryHeap;
+
+// ----------------------------------------------------------------------------
+
+class Overlay : public virtual RefBase
+{
+public:
+    Overlay(overlay_set_fd_hook set_fd,
+            overlay_set_crop_hook set_crop,
+            overlay_queue_buffer_hook queue_buffer,
+            void* data);
+
+    /* destroys this overlay */
+    void destroy();
+    
+    /* get the HAL handle for this overlay */
+    void* getHandleRef() const;
+
+    /* blocks until an overlay buffer is available and return that buffer. */
+    status_t dequeueBuffer(void** buffer);
+
+    /* release the overlay buffer and post it */
+    status_t queueBuffer(void* buffer);
+
+    /* change the width and height of the overlay */
+    status_t resizeInput(uint32_t width, uint32_t height);
+
+    status_t setCrop(uint32_t x, uint32_t y, uint32_t w, uint32_t h) ;
+
+    status_t getCrop(uint32_t* x, uint32_t* y, uint32_t* w, uint32_t* h) ;
+
+    /* set the buffer attributes */
+    status_t setParameter(int param, int value);
+    status_t setFd(int fd);
+
+    /* returns the address of a given buffer if supported, NULL otherwise. */
+    void* getBufferAddress(void* buffer);
+
+    /* get physical informations about the overlay */
+    uint32_t getWidth() const;
+    uint32_t getHeight() const;
+    int32_t getFormat() const;
+    int32_t getWidthStride() const;
+    int32_t getHeightStride() const;
+    int32_t getBufferCount() const;
+    status_t getStatus() const;
+    
+private:
+    virtual ~Overlay();
+
+    // C style hook
+    overlay_set_fd_hook set_fd_hook;
+    overlay_set_crop_hook set_crop_hook;
+    overlay_queue_buffer_hook queue_buffer_hook;
+    void* hook_data;
+
+    status_t mStatus;
+};
+
+// ----------------------------------------------------------------------------
+
+}; // namespace android
+
+#endif // ANDROID_OVERLAY_H
diff --git a/libs/ui/Android.mk b/libs/ui/Android.mk
index fbabfc4..6c9e0df 100644
--- a/libs/ui/Android.mk
+++ b/libs/ui/Android.mk
@@ -42,6 +42,7 @@ include \$(CLEAR_VARS)
 
 LOCAL_SRC_FILES:= \
 	\$(commonSources) \
+	Overlay.cpp \
 	EGLUtils.cpp \
 	FramebufferNativeWindow.cpp \
 	GraphicBuffer.cpp \
diff --git a/libs/ui/Overlay.cpp b/libs/ui/Overlay.cpp
new file mode 100644
index 0000000..f6653b4
--- /dev/null
+++ b/libs/ui/Overlay.cpp
@@ -0,0 +1,128 @@
+/*
+ * Copyright (C) 2007 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#define LOG_TAG "Overlay"
+
+#include <binder/IMemory.h>
+#include <binder/Parcel.h>
+#include <utils/Errors.h>
+#include <binder/MemoryHeapBase.h>
+
+#include <ui/Overlay.h>
+
+namespace android {
+
+Overlay::Overlay(overlay_set_fd_hook set_fd,
+        overlay_set_crop_hook set_crop,
+        overlay_queue_buffer_hook queue_buffer,
+        void *data)
+    : mStatus(NO_INIT)
+{
+    set_fd_hook = set_fd;
+    set_crop_hook = set_crop;
+    queue_buffer_hook = queue_buffer;
+    hook_data = data;
+    mStatus = NO_ERROR;
+}
+
+Overlay::~Overlay() {
+}
+
+status_t Overlay::dequeueBuffer(void** buffer)
+{
+    return mStatus;
+}
+
+status_t Overlay::queueBuffer(void* buffer)
+{
+    if (queue_buffer_hook)
+        queue_buffer_hook(hook_data, buffer);
+    return mStatus;
+}
+
+status_t Overlay::resizeInput(uint32_t width, uint32_t height)
+{
+    return mStatus;
+}
+
+status_t Overlay::setParameter(int param, int value)
+{
+    return mStatus;
+}
+
+status_t Overlay::setCrop(uint32_t x, uint32_t y, uint32_t w, uint32_t h)
+{
+    if (set_crop_hook)
+        set_crop_hook(hook_data, x, y, w, h);
+    return mStatus;
+}
+
+status_t Overlay::getCrop(uint32_t* x, uint32_t* y, uint32_t* w, uint32_t* h)
+{
+    return mStatus;
+}
+
+status_t Overlay::setFd(int fd)
+{
+    if (set_fd_hook)
+        set_fd_hook(hook_data, fd);
+    return mStatus;
+}
+
+int32_t Overlay::getBufferCount() const
+{
+    return 0;
+}
+
+void* Overlay::getBufferAddress(void* buffer)
+{
+    return 0;
+}
+
+void Overlay::destroy() {  
+}
+
+status_t Overlay::getStatus() const {
+    return mStatus;
+}
+
+void* Overlay::getHandleRef() const {
+    return 0;
+}
+
+uint32_t Overlay::getWidth() const {
+    return 0;
+}
+
+uint32_t Overlay::getHeight() const {
+    return 0;
+}
+
+int32_t Overlay::getFormat() const {
+    return 0;
+}
+
+int32_t Overlay::getWidthStride() const {
+    return 0;
+}
+
+int32_t Overlay::getHeightStride() const {
+    return 0;
+}
+
+// ----------------------------------------------------------------------------
+
+}; // namespace android
EOF4
